<?php

/**
 * Skeleton subclass for representing a row from the 'listing' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon Aug 23 12:32:41 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Listing extends BaseListing {

    public function  __toString() {
        return $this->getName().' - '.$this->getAddress();
    }

    public function save(PropelPDO $con = null) {

        // if this is the first save attach the user id, and the listing status
        if ($this->isNew()) {
           
                // set the listing to the logged in user
                $this->setUserId(sfContext::getInstance()->getUser()->getGuardUser()->getId());

                // make the listing unpaid by default so the user has to pay to get it shown
                $this->setListingStatusId(ListingStatusPeer::getIdFromName('Available'));

        }

        // call the parent to save
        $object = parent::save($con);

        return $object;
    }

    public function getShortDescription() {

        // only get the first 30 words of the description for a taste
        $space_limit = strrpos($this->getDescription(), ' ', 30);

        // if the space limit isnt false it is longer than thirty words and should be cut
        if ($space_limit !== false) {
            // create the new string and append '...' so people know it is continued
            $new_desc = substr($this->getDescription(), 0, $space_limit);

            return $new_desc.'...';
        }

        // if false then the whole thing is less than 30 words, so return the whole thing
        return $this->getDescription();

    }

    public function getViewStatus() {

        if ($this->getListingStatus()->getName() == 'Sold') {
            return 'Cannot list sold';
        }

        $c = new Criteria();

        $c->add(ListingTimePeer::END_DATE, time(), Criteria::GREATER_EQUAL);

        $times = $this->getListingTimes($c);

        if (count($times) > 0) {
            return 'Active';
        } else {
            return link_to('Click to make active', 'payment/new?id='.$this->getId());
        }
    }

    public function getPaymentHistory() {

        if (count($this->getListingTimes()) > 0) {
            return true;
        } else {
            return false;
        }

    }

    public function getInterestsCount() {

        // get the interests for the listing but double check to make sure its for the logged in user
        $c = new Criteria();

        $c->add(InterestPeer::LISTING_ID, $this->getId());

        return InterestPeer::doCount($c);

    }

}

// Listing
