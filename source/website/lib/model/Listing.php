<?php

/**
 * Skeleton subclass for representing a row from the 'listing' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Mon Aug 23 12:32:41 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Listing extends BaseListing {

    /**
     * Listing::__toString()
     * 
     * @return
     */
    public function __toString() {
        return $this->getName() . ' - ' . $this->getAddress();
    }

    /**
     * Listing::save()
     * 
     * @param mixed $con
     * @return
     */
    public function save(PropelPDO $con = null) {

        // if this is the first save attach the user id, and the listing status
        if ($this->isNew()) {

            // set the listing to the logged in user
            $this->setUserId(sfContext::getInstance()->getUser()->getGuardUser()->getId());

            // make the listing unpaid by default so the user has to pay to get it shown
            $this->setListingStatusId(ListingStatusPeer::getIdFromName('Available'));
        }

        // call the parent to save
        $object = parent::save($con);

        return $object;
    }

    /**
     * Listing::getShortDescription()
     * 
     * @return
     */
    public function getShortDescription() {

        // if the description is longer than 500 characters then only take the first 500 chars up to the end of a word!
        if (strlen($this->getDescription()) > 500) {

            $cleaned_string = strip_tags(substr(substr($this->getDescription(), 0, 500), 0, strrpos(substr($this->getDescription(), 0, 500), ' ')));

            return $cleaned_string.'...';
        }

        return $this->getDescription();

       
    }

    // function to return and print to the webpage the status of the listing and let the user pay to have it shown
    // if it isnt already active
    /**
     * Listing::getViewStatus()
     * 
     * @return
     */
    public function getViewStatus() {

        if ($this->getListingStatus()->getName() == 'Sold') {
            return 'Cannot list sold';
        }

        $c = new Criteria();

        $c->add(ListingTimePeer::END_DATE, time(), Criteria::GREATER_EQUAL);

        $times = $this->getListingTimes($c);

        if (count($times) > 0) {
            return 'Active';
        } else {
            return link_to('Click to make active', 'payment/new?id=' . $this->getId());
        }
    }

    // simple function to tell the view if there is any payment history for the listing
    /**
     * Listing::getPaymentHistory()
     * 
     * @return
     */
    public function getPaymentHistory() {

        if (count($this->getListingTimes()) > 0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Listing::getInterestsCount()
     * 
     * @return
     */
    public function getInterestsCount() {

        // get the interests for the listing but double check to make sure its for the logged in user
        $c = new Criteria();

        $c->add(InterestPeer::LISTING_ID, $this->getId());

        return InterestPeer::doCount($c);
    }

    /**
     * Listing::getListingTypeName()
     * 
     * @return
     */
    public function getListingTypeName() {

        if ($this->getRentDetailsId() == null) {

            return 'sale';
        } else {

            return 'rent';
        }
    }

    // function to check security and see if the user should be able to view this listing
    /**
     * Listing::canView()
     * 
     * @return
     */
    public function canView() {

        if (sfContext::getInstance()->getUser()->isAuthenticated()) {

            // if its the user's own listing then they can always view it
            // if its not then we need to make sure there is a payment for the view that is current for today
            if ($this->getUserId() == sfContext::getInstance()->getUser()->getGuardUser()->getId() || ListingTimePeer::isCurrentListing($this->getId())) {

                return true;
            }
        } elseif (ListingTimePeer::isCurrentListing($this->getId())) {

            return true;
        }

        return false;
    }

    /**
     * Listing::hasPhoto()
     * 
     * @return
     */
    public function hasPhoto() {
        
        $photos = $this->getListingPhotoss();
        
        if (count($this->getListingPhotoss()) > 0 && $photos[0]->getPath() != '') {
            return true;
        }

        return false;
    }

    /**
     * Listing::getFirstPhotoPath()
     * 
     * @return
     */
    public function getFirstPhotoPath() {

        $photos = $this->getListingPhotoss();

        return $photos[0]->getPath();
    }

}

// Listing
